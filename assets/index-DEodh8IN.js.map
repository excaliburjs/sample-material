{"version":3,"file":"index-DEodh8IN.js","sources":["../../src/water/sword.png?url","../../src/water/stars.png?url","../../src/water/water.ts"],"sourcesContent":["export default \"__VITE_ASSET__DtkpQc$j__\"","export default \"__VITE_ASSET__DTZlz5jE__\"","\n// identity tagged template literal lights up glsl-literal vscode plugin\n\nimport { Actor, Color, CoordPlane, DisplayMode, Engine, ImageFiltering, ImageSource, ImageWrapping, Loader, ScreenElement, Sprite, TiledSprite, vec } from \"excalibur\";\nimport { glsl } from \"../glsl\";\nimport swordImg from \"./sword.png?url\";\nimport starImg from './stars.png?url';\n\nconst game = new Engine({\n\twidth: 800,\n\theight: 800,\n\tdisplayMode: DisplayMode.FitScreenAndFill,\n\tbackgroundColor: Color.Black,\n\tsuppressPlayButton: true,\n\tantialiasing: true\n});\n\nconst tex = new ImageSource(swordImg, false, ImageFiltering.Pixel);\nconst background = new ImageSource(starImg, {\n\tfiltering: ImageFiltering.Blended,\n\twrapping: ImageWrapping.Repeat\n});\n\nconst loader = new Loader([tex, background]);\n\nconst actor = new Actor({ x: 100, y: 100, width: 50, height: 50 });\nactor.onInitialize = () => {\n\tconst sprite = new Sprite({\n\t\timage: tex,\n\t\tdestSize: {\n\t\t\twidth: 300,\n\t\t\theight: 300\n\t\t}\n\t});\n\tactor.graphics.add(sprite);\n};\n\n\ngame.input.pointers.primary.on('move', (evt) => {\n\tactor.pos = evt.worldPos;\n});\n\nconst backgroundActor = new ScreenElement({\n\tx: game.screen.unsafeArea.left,\n\ty: game.screen.unsafeArea.top,\n\twidth: 800,\n\theight: 800,\n\tz: -1\n});\n\nbackgroundActor.onInitialize = () => {\n\tconst bgSprite = new TiledSprite({\n\t\timage: background,\n\t\twidth: 1000,\n\t\theight: 1000\n\t});\n\tbackgroundActor.graphics.add(bgSprite);\n};\n\nconst waterFrag = glsl`#version 300 es\nprecision mediump float;\n\n#define NUM_NOISE_OCTAVES 20\n\n// Precision-adjusted variations of https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(i), hash(i + 1.0), u);\n}\n\n\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    // Simple 2D lerp using smoothstep envelope between the values.\n\t// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tmix(c, d, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tsmoothstep(0.0, 1.0, f.y)));\n\n\t// Same code, with the clamps in smoothstep and common subexpressions\n\t// optimized away.\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat fbm(float x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tfloat shift = float(100);\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\t// Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n\n\nuniform float u_time_ms;\nuniform vec4 u_color;\nuniform sampler2D u_graphic;\nuniform sampler2D u_screen_texture;\nuniform sampler2D u_noise;\n\nuniform vec2 u_resolution; // screen resolution\nuniform vec2 u_graphic_resolution; // graphic resolution\n\nin vec2 v_uv;\nin vec2 v_screenuv;\nout vec4 fragColor;\nvoid main() {\n  float time_sec = u_time_ms / 1000.;\n  float wave_amplitude = .525;\n  float wave_speed = 1.8;\n  float wave_period = .175;\n  vec2 scale = vec2(2.5, 8.5);\n\n  float waves = v_uv.y * scale.y + \n        sin(v_uv.x * scale.x / wave_period - time_sec * wave_speed) *\n        cos(0.2 * v_uv.x * scale.x /wave_period + time_sec * wave_speed) *\n        wave_amplitude - wave_amplitude;\n\n  // float distortion = (texture(u_noise, v_uv)).x;\n  float distortion = noise(v_uv*scale*vec2(2.1, 1.05) + time_sec * 0.12) * .25 - .125;\n\n  vec2 reflected_screenuv = vec2(v_screenuv.x - distortion, v_screenuv.y);\n  vec4 screen_color = texture(u_screen_texture, reflected_screenuv);\n\n  vec4 wave_crest_color = vec4(1);\n  float wave_crest = clamp(smoothstep(0.1, 0.14, waves) - smoothstep(0.018, 0.99, waves), 0., 1.);\n\n  fragColor.a = smoothstep(0.1, 0.12, waves);\n  vec3 mixColor = (u_color.rgb * u_color.a); // pre-multiplied alpha\n  \n  fragColor.rgb = mix(screen_color.rgb, mixColor, u_color.a)*fragColor.a + (wave_crest_color.rgb * wave_crest);\n  // fragColor.rgb = texture(u_noise, v_uv).rgb * fragColor.a;\n  // fragColor.rgb = vec3(gl_FragCoord.xy/u_resolution, 0.0);\n}`;\n\nconst noise = new ImageSource('./noise.avif', false, ImageFiltering.Pixel);\nloader.addResource(noise);\n\nconst waterMaterial = game.graphicsContext.createMaterial({\n\tname: 'water',\n\tfragmentSource: waterFrag,\n\tcolor: Color.fromRGB(55, 0, 200, 0.6),\n\timages: {\n\t\tu_noise: noise\n\t}\n});\nconst reflection = new Actor({\n\tx: game.screen.unsafeArea.left,\n\ty: game.screen.resolution.height / 2,\n\tanchor: vec(0, 0),\n\twidth: 1000,\n\theight: 600,\n\tcoordPlane: CoordPlane.Screen,\n\tcolor: Color.Red\n});\n\nreflection.graphics.material = waterMaterial;\nreflection.z = 99;\n\ngame.add(actor);\ngame.add(backgroundActor);\ngame.add(reflection);\n\ngame.start(loader);\n"],"names":["swordImg","starImg","game","Engine","DisplayMode","Color","tex","ImageSource","ImageFiltering","background","ImageWrapping","loader","Loader","actor","Actor","sprite","Sprite","evt","backgroundActor","ScreenElement","bgSprite","TiledSprite","waterFrag","glsl","noise","waterMaterial","reflection","vec","CoordPlane"],"mappings":"uKAAA,MAAeA,EAAA,6CCAAC,EAAA,6CCQTC,EAAO,IAAIC,EAAO,CACvB,MAAO,IACP,OAAQ,IACR,YAAaC,EAAY,iBACzB,gBAAiBC,EAAM,MACvB,mBAAoB,GACpB,aAAc,EACf,CAAC,EAEKC,EAAM,IAAIC,EAAYP,EAAU,GAAOQ,EAAe,KAAK,EAC3DC,EAAa,IAAIF,EAAYN,EAAS,CAC3C,UAAWO,EAAe,QAC1B,SAAUE,EAAc,MACzB,CAAC,EAEKC,EAAS,IAAIC,EAAO,CAACN,EAAKG,CAAU,CAAC,EAErCI,EAAQ,IAAIC,EAAM,CAAE,EAAG,IAAK,EAAG,IAAK,MAAO,GAAI,OAAQ,EAAA,CAAI,EACjED,EAAM,aAAe,IAAM,CACpB,MAAAE,EAAS,IAAIC,EAAO,CACzB,MAAOV,EACP,SAAU,CACT,MAAO,IACP,OAAQ,GAAA,CACT,CACA,EACKO,EAAA,SAAS,IAAIE,CAAM,CAC1B,EAGAb,EAAK,MAAM,SAAS,QAAQ,GAAG,OAASe,GAAQ,CAC/CJ,EAAM,IAAMI,EAAI,QACjB,CAAC,EAED,MAAMC,EAAkB,IAAIC,EAAc,CACzC,EAAGjB,EAAK,OAAO,WAAW,KAC1B,EAAGA,EAAK,OAAO,WAAW,IAC1B,MAAO,IACP,OAAQ,IACR,EAAG,EACJ,CAAC,EAEDgB,EAAgB,aAAe,IAAM,CAC9B,MAAAE,EAAW,IAAIC,EAAY,CAChC,MAAOZ,EACP,MAAO,IACP,OAAQ,GAAA,CACR,EACeS,EAAA,SAAS,IAAIE,CAAQ,CACtjB,EAAY,eAAgB,GAAOC,EAAe,KAAK,EACzEG,EAAO,YAAYa,CAAK,EAExB,MAAMC,EAAgBvB,EAAK,gBAAgB,eAAe,CACzD,KAAM,QACN,eAAgBoB,EAChB,MAAOjB,EAAM,QAAQ,GAAI,EAAG,IAAK,EAAG,EACpC,OAAQ,CACP,QAASmB,CAAA,CAEX,CAAC,EACKE,EAAa,IAAIZ,EAAM,CAC5B,EAAGZ,EAAK,OAAO,WAAW,KAC1B,EAAGA,EAAK,OAAO,WAAW,OAAS,EACnC,OAAQyB,EAAI,EAAG,CAAC,EAChB,MAAO,IACP,OAAQ,IACR,WAAYC,EAAW,OACvB,MAAOvB,EAAM,GACd,CAAC,EAEDqB,EAAW,SAAS,SAAWD,EAC/BC,EAAW,EAAI,GAEfxB,EAAK,IAAIW,CAAK,EACdX,EAAK,IAAIgB,CAAe,EACxBhB,EAAK,IAAIwB,CAAU,EAEnBxB,EAAK,MAAMS,CAAM"}