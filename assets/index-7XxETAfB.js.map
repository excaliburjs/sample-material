{"version":3,"file":"index-7XxETAfB.js","sources":["../../src/grid/grid.glsl?raw","../../src/grid/grid.ts"],"sourcesContent":["export default \"#version 300 es\\nprecision mediump float;\\n\\nin vec2 v_uv; // built in from excalibur\\n\\nout vec4 fragColor;\\n\\nuniform vec2 u_resolution; // built in uniform from excalibur\\nuniform vec2 u_graphic_resolution; // built in uniform from excalibur\\nuniform float u_spacing;\\nuniform float u_width;\\nuniform vec2 u_camera;\\nuniform float u_camera_zoom;\\nuniform vec2 u_offset;\\nuniform vec4 u_background_color;\\nuniform vec4 u_line_color;\\n\\nvec3 drawGrid(vec2 center, vec3 color, vec3 lineColor, float spacing, float width, float zoom) {\\n    spacing *= zoom;\\n    vec2 cells = abs(fract(center * u_graphic_resolution / spacing) - 0.5);\\n    float distToEdge = (0.5 - max(cells.x, cells.y)) * spacing;\\n    float lines = smoothstep(0., width, distToEdge);\\n    color = mix(lineColor,color,lines);\\n    return color;\\n}\\nvoid main() {\\n    vec2 center = v_uv; // center screen\\n    vec2 offset = (u_offset / u_graphic_resolution) * u_camera_zoom;\\n    vec2 distFromCenter = (center + offset)  - (u_camera / u_graphic_resolution) * u_camera_zoom;\\n    vec3 gridColor = drawGrid(distFromCenter, u_background_color.rgb, u_line_color.rgb, u_spacing, u_width,  u_camera_zoom);\\n    fragColor.a = 1.;\\n    fragColor.rgb = gridColor * fragColor.a; // excalibur expects pre-multiplied colors in shaders\\n\\n}\\n\\n\"","import { Actor, Color, CoordPlane, DisplayMode, Engine, Material, Rectangle, Vector, vec } from \"excalibur\";\n\nimport gridSource from './grid.glsl?raw' // vite needs raw pragma to get import as text\n\nexport class Grid extends Actor {\n    originalCenter!: Vector;\n    material!: Material;\n    constructor(public size: number) {\n        super({\n            pos: vec(0, 0),\n            anchor: vec(0, 0),\n            coordPlane: CoordPlane.Screen,\n            z: -Infinity\n        })\n    }\n\n    onInitialize(engine: Engine): void {\n        this.originalCenter = engine.currentScene.camera.pos;\n        this.graphics.use(new Rectangle({\n            width: engine.screen.resolution.width,\n            height: engine.screen.resolution.height,\n            color: Color.Transparent // overridden by shader\n        }));\n        this.material = engine.graphicsContext.createMaterial({\n            name: 'grid',\n            fragmentSource: gridSource\n        });\n        this.material.update(shader => {\n            shader.trySetUniformFloat('u_spacing', this.size);\n            shader.trySetUniformFloat('u_width', 1);\n            const res = vec(engine.screen.resolution.width, engine.screen.resolution.height);\n            const offset = res.sub(res.scale(1 / engine.currentScene.camera.zoom)).scale(.5);\n            shader.trySetUniformFloatVector('u_offset', offset);\n            shader.trySetUniformFloatColor('u_background_color', Color.ExcaliburBlue);\n            shader.trySetUniformFloatColor('u_line_color', Color.White);\n        });\n        this.graphics.material = this.material;\n\n        this.graphics.onPreDraw = () => {\n            this.material.update(shader => {\n                const delta = this.originalCenter.sub(engine.currentScene.camera.pos);\n                const res = vec(engine.screen.resolution.width, engine.screen.resolution.height);\n                const offset = res.sub(res.scale(1 / engine.currentScene.camera.zoom)).scale(.5);\n                shader.trySetUniformFloatVector('u_offset', offset);\n                shader.trySetUniformFloatVector('u_camera', delta);\n                shader.trySetUniformFloat('u_camera_zoom', engine.currentScene.camera.zoom);\n            })\n        }\n    }\n}\n\nconst game = new Engine({\n    width: 800,\n    height: 800,\n    displayMode: DisplayMode.FitScreen\n});\n\ngame.add(new Grid(32));\nlet currentPointer!: ex.Vector;\nlet down = false;\ngame.input.pointers.primary.on('down', (e) => {\n    currentPointer = e.worldPos;\n    down = true;\n});\ngame.input.pointers.primary.on('up', () => {\n    down = false;\n});\n\ngame.input.pointers.primary.on('move', (e) => {\n    if (down) {\n        // drag the camera\n        const currentCameraScreen = game.screen.worldToScreenCoordinates(game.currentScene.camera.pos)\n        const delta = currentCameraScreen.sub(e.screenPos).scale(1 / game.currentScene.camera.zoom);\n        game.currentScene.camera.pos = currentPointer.add(delta);\n    }\n})\n\n\ngame.input.pointers.primary.on('wheel', (wheelEvent) => {\n    // wheel up\n    game.currentScene.camera.pos = currentPointer;\n    if (wheelEvent.deltaY < 0) {\n        game.currentScene.camera.zoom *= 1.02;\n    } else {\n        game.currentScene.camera.zoom /= 1.02;\n    }\n});\n\ngame.start().then(() => {\n    currentPointer = game.currentScene.camera.pos;\n});\n\ngame.start();\n"],"names":["gridSource","Grid","Actor","size","vec","CoordPlane","__publicField","engine","Rectangle","Color","shader","res","offset","delta","game","Engine","DisplayMode","currentPointer","down","e","wheelEvent"],"mappings":"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"}